generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  fullName      String
  trainName     String?
  isAdmin       Boolean  @default(false)
  currentStep   Int      @default(0)
  currentModule Int      @default(0)
  currentTopic  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  answers       Answer[]

  @@map("users")
}

model Module {
  id           String    @id @default(cuid())
  moduleNumber Int       @unique
  title        String
  description  String
  isActive     Boolean   @default(false)
  isReleased   Boolean   @default(false)
  releaseDate  DateTime?
  deadline     DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  topics       Topic[]

  @@map("modules")
}

model Topic {
  id          String    @id @default(cuid())
  topicNumber Int
  title       String
  content     String
  description String
  deadline    DateTime
  points      Int       @default(100)
  bonusPoints Int       @default(50)
  isActive    Boolean   @default(false)
  isReleased  Boolean   @default(false)
  releaseDate DateTime?
  releasedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  moduleId    String
  answers     Answer[]
  module      Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([moduleId, topicNumber])
  @@map("topics")
}

model Question {
  id             String    @id @default(cuid())
  questionNumber Int       @unique
  title          String
  content        String
  description    String
  deadline       DateTime
  points         Int       @default(100)
  bonusPoints    Int       @default(50)
  isActive       Boolean   @default(false)
  isReleased     Boolean   @default(false)
  releaseDate    DateTime?
  releasedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  answers        Answer[]

  @@map("questions")
}

model Answer {
  id            String    @id @default(cuid())
  content       String
  status        String    @default("PENDING")
  submittedAt   DateTime  @default(now())
  reviewedAt    DateTime?
  reviewedBy    String?
  feedback      String?
  pointsAwarded Int?
  userId        String
  questionId    String?
  topicId       String?
  topic         Topic?    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  question      Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model GameConfig {
  id                           String   @id @default("singleton")
  questionReleaseIntervalHours Int      @default(48)
  totalQuestions               Int      @default(12)
  gameStartDate                DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  @@map("game_config")
}
