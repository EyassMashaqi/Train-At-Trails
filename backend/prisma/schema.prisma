generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  password          String
  fullName          String
  trainName         String?
  isAdmin           Boolean           @default(false)
  currentStep       Int               @default(0)
  currentCohortId   String?           // Reference to the user's current active cohort
  currentCohort     Cohort?           @relation("CurrentCohort", fields: [currentCohortId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  answers           Answer[]
  miniAnswers       MiniAnswer[]
  cohortMembers     CohortMember[]    // Many-to-many relationship with cohorts

  @@map("users")
}

model Module {
  id           String     @id @default(cuid())
  moduleNumber Int
  title        String
  description  String
  theme        String     @default("trains") // Theme: trains, planes, sailboat, cars, f1
  isActive     Boolean    @default(false)
  isReleased   Boolean    @default(false)
  releaseDate  DateTime?
  releasedAt   DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  cohortId     String     // Each module belongs to a cohort
  cohort       Cohort     @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  questions    Question[]

  @@unique([moduleNumber, cohortId]) // Module numbers are unique within a cohort
  @@map("modules")
}

model Question {
  id             String        @id @default(cuid())
  questionNumber Int
  title          String
  content        String
  description    String
  deadline       DateTime
  points         Int           @default(100)
  bonusPoints    Int           @default(50)
  isActive       Boolean       @default(false)
  isReleased     Boolean       @default(false)
  releaseDate    DateTime?
  releasedAt     DateTime?
  // Module and topic relationship
  moduleId       String?       // Reference to Module
  module         Module?       @relation(fields: [moduleId], references: [id], onDelete: SetNull)
  topicNumber    Int?          // Topic ordering within modules
  category       String?       // Optional: categorization (e.g., "Adventure", "Problem Solving")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  cohortId       String        // Each question belongs to a cohort
  cohort         Cohort        @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  answers        Answer[]
  contents       Content[]     // Self-learning content sections

  @@unique([questionNumber, cohortId]) // Question numbers are unique within a cohort
  @@map("questions")
}

model Answer {
  id                   String       @id @default(cuid())
  content              String       // Now used for link URL
  notes                String?      // Additional notes from user
  status               String       @default("PENDING")
  grade                String?      // New: GOLD, SILVER, COPPER, NEEDS_RESUBMISSION
  gradePoints          Int?         // Points based on grade (100, 85, 70, 0)
  submittedAt          DateTime     @default(now())
  reviewedAt           DateTime?
  reviewedBy           String?
  feedback             String?
  pointsAwarded        Int?
  resubmissionRequested Boolean     @default(false) // New: for resubmission requests
  resubmissionApproved Boolean?     // New: admin approval for resubmission
  resubmissionRequestedAt DateTime? // New: when resubmission was requested
  attachmentFileName   String?      // Original filename of the attachment
  attachmentFilePath   String?      // Server path to the uploaded file
  attachmentFileSize   Int?         // File size in bytes
  attachmentMimeType   String?      // MIME type of the file
  userId               String
  questionId           String
  cohortId             String       // Answer belongs to a specific cohort
  question             Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user                 User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  cohort               Cohort       @relation(fields: [cohortId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId, cohortId]) // One answer per user per question per cohort
  @@map("answers")
}

model Content {
  id            String         @id @default(cuid())
  title         String
  material      String         // Rich text content for learning material
  orderIndex    Int            // Order within the question
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  questionId    String
  question      Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  miniQuestions MiniQuestion[]

  @@map("contents")
}

model MiniQuestion {
  id                String       @id @default(cuid())
  title             String
  question          String       // The mini-question text
  description       String?      // Optional additional context
  resourceUrl       String?      // URL link for learning resource (NEW FIELD)
  releaseDate       DateTime?    // Optional release date for the mini question
  isReleased        Boolean      @default(false) // Whether the mini question is released
  actualReleaseDate DateTime?    // When it was actually released
  orderIndex        Int          // Order within the content section
  isActive          Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  contentId         String
  content           Content      @relation(fields: [contentId], references: [id], onDelete: Cascade)
  miniAnswers       MiniAnswer[]

  @@map("mini_questions")
}

model MiniAnswer {
  id             String       @id @default(cuid())
  linkUrl        String       // The submitted link
  notes          String?      // Optional notes from user
  submittedAt    DateTime     @default(now())
  userId         String
  miniQuestionId String
  cohortId       String       // Mini answer belongs to a specific cohort
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  miniQuestion   MiniQuestion @relation(fields: [miniQuestionId], references: [id], onDelete: Cascade)
  cohort         Cohort       @relation(fields: [cohortId], references: [id], onDelete: Cascade)

  @@unique([userId, miniQuestionId, cohortId]) // One answer per user per mini-question per cohort
  @@map("mini_answers")
}

model GameConfig {
  id                           String   @id @default("singleton")
  questionReleaseIntervalHours Int      @default(48)
  totalQuestions               Int      @default(12)
  gameStartDate                DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  @@map("game_config")
}

model Cohort {
  id               String          @id @default(cuid())
  name             String          @unique
  description      String?
  startDate        DateTime
  endDate          DateTime?
  defaultTheme     String          @default("trains") // Default theme for the cohort
  isActive         Boolean         @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  modules          Module[]
  questions        Question[]
  answers          Answer[]
  miniAnswers      MiniAnswer[]
  cohortMembers    CohortMember[]
  currentUsers     User[]          @relation("CurrentCohort") // Users who have this as current cohort
  gameConfig       CohortGameConfig?

  @@map("cohorts")
}

model CohortMember {
  id              String    @id @default(cuid())
  userId          String
  cohortId        String
  currentStep     Int       @default(0)
  joinedAt        DateTime  @default(now())
  // Status management - replaces simple isActive/isGraduated
  status          String    @default("ENROLLED") // ENROLLED, GRADUATED, REMOVED, SUSPENDED
  statusChangedAt DateTime  @default(now())
  statusChangedBy String?   // Admin who changed the status
  // Legacy fields for backward compatibility
  isActive        Boolean   @default(true)
  isGraduated     Boolean   @default(false)
  graduatedAt     DateTime?
  graduatedBy     String?
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  cohort          Cohort    @relation(fields: [cohortId], references: [id], onDelete: Cascade)

  @@unique([userId, cohortId]) // One membership per user per cohort
  @@map("cohort_members")
}

model CohortGameConfig {
  id                           String   @id @default(cuid())
  cohortId                     String   @unique
  questionReleaseIntervalHours Int      @default(48)
  totalQuestions               Int      @default(12)
  gameStartDate                DateTime @default(now())
  updatedAt                    DateTime @updatedAt
  cohort                       Cohort   @relation(fields: [cohortId], references: [id], onDelete: Cascade)

  @@map("cohort_game_configs")
}
