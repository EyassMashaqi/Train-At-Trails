generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  email            String         @unique
  password         String
  fullName         String
  trainName        String?
  isAdmin          Boolean        @default(false)
  currentStep      Int            @default(0)
  currentCohortId  String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?      @db.Timestamp(6)
  answers          Answer[]
  cohortMembers    CohortMember[]
  miniAnswers      MiniAnswer[]
  currentCohort    Cohort?        @relation("CurrentCohort", fields: [currentCohortId], references: [id])

  @@index([resetToken], map: "idx_users_reset_token")
  @@map("users")
}

model Module {
  id           String     @id @default(cuid())
  moduleNumber Int
  title        String
  description  String
  theme        String     @default("trains")
  isActive     Boolean    @default(false)
  isReleased   Boolean    @default(false)
  releaseDate  DateTime?
  releasedAt   DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  cohortId     String
  cohort       Cohort     @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  questions    Question[]

  @@unique([moduleNumber, cohortId])
  @@map("modules")
}

model Question {
  id             String    @id @default(cuid())
  questionNumber Int
  title          String
  content        String
  description    String
  deadline       DateTime
  points         Int       @default(100)
  bonusPoints    Int       @default(50)
  isActive       Boolean   @default(false)
  isReleased     Boolean   @default(false)
  releaseDate    DateTime?
  releasedAt     DateTime?
  moduleId       String?
  topicNumber    Int?
  category       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  cohortId       String
  answers        Answer[]
  contents       Content[]
  cohort         Cohort    @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  module         Module?   @relation(fields: [moduleId], references: [id])

  @@unique([questionNumber, cohortId])
  @@map("questions")
}

model Answer {
  id                      String    @id @default(cuid())
  content                 String
  notes                   String?
  status                  String    @default("PENDING")
  grade                   String?
  gradePoints             Int?
  submittedAt             DateTime  @default(now())
  reviewedAt              DateTime?
  reviewedBy              String?
  feedback                String?
  pointsAwarded           Int?
  resubmissionRequested   Boolean   @default(false)
  resubmissionApproved    Boolean?
  resubmissionRequestedAt DateTime?
  attachmentFileName      String?
  attachmentFilePath      String?
  attachmentFileSize      Int?
  attachmentMimeType      String?
  userId                  String
  questionId              String
  cohortId                String
  cohort                  Cohort    @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  question                Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId, cohortId])
  @@map("answers")
}

model Content {
  id            String         @id @default(cuid())
  title         String
  material      String
  orderIndex    Int
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  questionId    String
  question      Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  miniQuestions MiniQuestion[]

  @@map("contents")
}

model MiniQuestion {
  id                String       @id @default(cuid())
  title             String
  question          String
  description       String?
  resourceUrl       String?
  releaseDate       DateTime?
  isReleased        Boolean      @default(false)
  actualReleaseDate DateTime?
  orderIndex        Int
  isActive          Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  contentId         String
  miniAnswers       MiniAnswer[]
  content           Content      @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("mini_questions")
}

model MiniAnswer {
  id                      String       @id @default(cuid())
  linkUrl                 String
  notes                   String?
  submittedAt             DateTime     @default(now())
  userId                  String
  miniQuestionId          String
  cohortId                String
  resubmissionRequested   Boolean      @default(false)
  resubmissionRequestedAt DateTime?
  resubmissionRequestedBy String?
  cohort                  Cohort       @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  miniQuestion            MiniQuestion @relation(fields: [miniQuestionId], references: [id], onDelete: Cascade)
  user                    User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, miniQuestionId, cohortId])
  @@map("mini_answers")
}

model GameConfig {
  id                           String   @id @default("singleton")
  questionReleaseIntervalHours Int      @default(48)
  totalQuestions               Int      @default(12)
  gameStartDate                DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  @@map("game_config")
}

model Cohort {
  id            String            @id @default(cuid())
  cohortNumber  Int
  name          String
  description   String?
  startDate     DateTime
  endDate       DateTime?
  defaultTheme  String            @default("trains")
  isActive      Boolean           @default(true)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  answers       Answer[]
  gameConfig    CohortGameConfig?
  cohortMembers CohortMember[]
  miniAnswers   MiniAnswer[]
  modules       Module[]
  questions     Question[]
  currentUsers  User[]            @relation("CurrentCohort")

  @@unique([name, cohortNumber])
  @@map("cohorts")
}

model CohortMember {
  id              String    @id @default(cuid())
  userId          String
  cohortId        String
  currentStep     Int       @default(0)
  joinedAt        DateTime  @default(now())
  status          String    @default("ENROLLED")
  statusChangedAt DateTime  @default(now())
  statusChangedBy String?
  isActive        Boolean   @default(true)
  isGraduated     Boolean   @default(false)
  graduatedAt     DateTime?
  graduatedBy     String?
  cohort          Cohort    @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, cohortId])
  @@map("cohort_members")
}

model CohortGameConfig {
  id                           String   @id @default(cuid())
  cohortId                     String   @unique
  questionReleaseIntervalHours Int      @default(48)
  totalQuestions               Int      @default(12)
  gameStartDate                DateTime @default(now())
  updatedAt                    DateTime @updatedAt
  cohort                       Cohort   @relation(fields: [cohortId], references: [id], onDelete: Cascade)

  @@map("cohort_game_configs")
}
